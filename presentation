Product Improvements:
- Terraform: Exception Handling with custom exception types/messages

- Terrafrom: Condiitonal Runs, it should be possible to create a custom module that runs before all the other modules to check that you're not gonna shoot yourself in the foot. This custom module should be able to use provisioners for custom scripting and verification. If the resource fails, then custom message should be printed.

- Terraform: lifecycle depends_on should allow variable interpolation. This would help with collaborative infrastructure as you can create null resources as configuration sources, specify their ordering externally, and not have to worry about race conditions. For instance, if multiple null_resources that are running remote-exec and their all apt-get updating, the run will fail as the lock file is acquired.

- Packer: should integrate directly with both consul and vault. This would make immutable infrastructure even easier to implement. Should be able to both read and write from vault and consul.



Demo:
Show how operations can inject configuration into a developers pipeline with blue/green deployments.
- Build image from developers repository
- Build infrastructure using image *showcase operations config injection
- Upgrade image from developers repository
- Perform Blue/Green deployment. Picking up new upgraded image; but, also picking up new operations config.



operations teams owning infrastructure templates allows security and compliance 
measures to be encapsulated into modules that easily enable self-service for developers

Terraform becomes the enabler of DevOps. What is DevOps? 
DevOps is the collaboration between developers and operations. 
When Operations provide re-usable modules that address operational concerns regarding updated packages, firewall rules, and any other pertinent configuration to Development teams, These modules become the contract between Developers and Operations. 
Just like library developers creating libraries for application developers. 
The internals are encapsulate... 

The user only cares what it's doing, the implementer cares about how it's doing it. both parties are happy.

With other frameworks such as awscli, az, or gc, you can build out your infrastructure. 
But, it's much easier for developers to accidentally make a mistake that could impact production, security, or compliance.
This workflow removes the opportunity for these mistakes to happen. 

* it will prevent mistakes. Our enterprise solution with sentinel will actually enforce policy so that intentional violations are also caught.

12 Factor App 
- configuration
- repository
